# HEALTH AI FRONTEND INTEGRATION - Next.js Components
# ===================================================
# Enhanced Next.js Health Helper app with AI integration

## 1. ENHANCED MAIN DASHBOARD
# File: src/app/page.tsx (Updated with AI integration)

"use client"

import React from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChartContainer, ChartLegend, ChartLegendContent, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Line, LineChart, XAxis, YAxis, CartesianGrid, BarChart, Bar } from "recharts"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { loadEntries, upsertEntry, todayISO, lastNDays, toTimeSeries, generateInsights, predictSleepQuality, predictSymptoms, type HealthEntry, type SleepEntry, type MentalEntry, type SymptomEntry } from "@/lib/health"
import { loadSampleData } from "@/lib/sampleData"
import { exportCSV, exportPDF } from "@/lib/export"
import { healthAIClient, useHealthAI, convertHealthEntryToAIData } from "@/lib/health_ai_integration"

export default function HomePage() {
  const [date, setDate] = React.useState(todayISO())
  const [entries, setEntries] = React.useState(() => loadEntries())
  const [userId] = React.useState("user_001") // In production, get from auth
  const [aiPredictions, setAiPredictions] = React.useState<any[]>([])
  const [aiInsights, setAiInsights] = React.useState<any[]>([])
  const [aiLoading, setAiLoading] = React.useState(false)
  const [aiError, setAiError] = React.useState<string | null>(null)

  const [stomach, setStomach] = React.useState({
    severity: 0,
    painLocation: "",
    bowelChanges: "",
    triggers: { dairy: false, gluten: false, spicy: false, alcohol: false, caffeine: false },
    notes: "",
  })
  const [skin, setSkin] = React.useState({
    severity: 0,
    area: "",
    rash: false,
    itch: false,
    triggers: { cosmetics: false, detergent: false, weather: false, sweat: false, dietSugar: false },
    notes: "",
  })
  const [sleep, setSleep] = React.useState({
    startTime: "23:00",
    endTime: "07:00",
    durationHours: 8,
    qualityScore: 7,
    sleepStages: { deep: 20, light: 50, rem: 20, awake: 10 },
    sleepFactors: { caffeine: false, alcohol: false, exercise: false, stress: false, screenTime: false },
    notes: "",
  })
  const [mental, setMental] = React.useState({ 
    mood: 5, 
    anxiety: 5, 
    stressLevel: 5, 
    energy: 5, 
    focus: 5, 
    journalEntry: "",
    copingStrategies: [] as string[]
  })
  const [symptoms, setSymptoms] = React.useState({
    giFlare: 0,
    skinFlare: 0,
    migraine: 0,
    fatigue: 0,
    notes: "",
    // Enhanced GI symptoms
    reflux: 0,
    bloating: 0,
    abdominalPain: 0,
    stoolConsistency: 4, // Bristol stool scale (1-7)
    // Enhanced skin symptoms
    skinLocation: "",
    skinType: "",
    // Enhanced general health
    headache: 0,
  })
  
  // New state for enhanced features
  const [nutrition, setNutrition] = React.useState({
    foodType: "",
    portionSize: "",
    portionGrams: 0,
    artificialSweeteners: false,
    waterIntake: 0, // ml
    alcohol: 0, // drinks
    carbonatedDrinks: 0,
    // Macronutrients
    calories: 0,
    protein: 0,
    carbs: 0,
    fat: 0,
    fiber: 0,
    sugar: 0,
    // Additional macronutrients
    saturatedFat: 0,
    monounsaturatedFat: 0,
    polyunsaturatedFat: 0,
    transFat: 0,
    cholesterol: 0,
    sodium: 0,
    potassium: 0,
    // Micronutrients
    vitaminC: 0,
    vitaminD: 0,
    calcium: 0,
    iron: 0,
    magnesium: 0,
    zinc: 0,
  })
  
  const [lifestyle, setLifestyle] = React.useState({
    exerciseType: "",
    exerciseDuration: 0,
    exerciseIntensity: 5,
    recoveryActivities: [] as string[],
    meditationMinutes: 0,
    relaxationQuality: 5,
  })
  
  const [menstrual, setMenstrual] = React.useState({
    phase: "",
    cycleDay: 0,
  })
  
  const [dailyFlare, setDailyFlare] = React.useState({
    status: false,
    type: "",
    severity: 0,
    durationHours: 0,
  })

  React.useEffect(() => {
    // preload existing for selected date
    const e = loadEntries().find((x) => x.date === date)
    if (e?.stomach) setStomach({
      severity: e.stomach.severity,
      painLocation: e.stomach.painLocation ?? "",
      bowelChanges: e.stomach.bowelChanges ?? "",
      triggers: { ...e.stomach.triggers },
      notes: e.stomach.notes ?? "",
    })
    if (e?.skin) setSkin({
      severity: e.skin.severity,
      area: e.skin.area ?? "",
      rash: !!e.skin.rash,
      itch: !!e.skin.itch,
      triggers: { ...e.skin.triggers },
      notes: e.skin.notes ?? "",
    })
    if (e?.sleep) setSleep({
      startTime: e.sleep.startTime,
      endTime: e.sleep.endTime,
      durationHours: e.sleep.durationHours,
      qualityScore: e.sleep.qualityScore,
      sleepStages: e.sleep.sleepStages ?? { deep: 20, light: 50, rem: 20, awake: 10 },
      sleepFactors: { ...e.sleep.sleepFactors },
      notes: e.sleep.notes ?? "",
    })
    if (e?.mental) setMental({
      mood: e.mental.mood,
      anxiety: e.mental.anxiety,
      stressLevel: e.mental.stressLevel,
      energy: e.mental.energy,
      focus: e.mental.focus,
      journalEntry: e.mental.journalEntry ?? "",
      copingStrategies: e.mental.copingStrategies ?? [],
    })
    if (e?.symptoms) setSymptoms({
      giFlare: e.symptoms.giFlare,
      skinFlare: e.symptoms.skinFlare,
      migraine: e.symptoms.migraine,
      fatigue: e.symptoms.fatigue,
      notes: e.symptoms.notes ?? "",
    })
  }, [date])

  const series14 = toTimeSeries(lastNDays(entries, 14))
  const insights = React.useMemo(() => generateInsights(entries), [entries])
  
  // ML Predictions for current entry
  const currentEntry: HealthEntry = {
    date,
    stomach: stomach.severity > 0 ? { date, severity: Number(stomach.severity), painLocation: stomach.painLocation || undefined, bowelChanges: stomach.bowelChanges || undefined, triggers: stomach.triggers, notes: stomach.notes || undefined } : undefined,
    skin: skin.severity > 0 ? { date, severity: Number(skin.severity), area: skin.area || undefined, rash: skin.rash, itch: skin.itch, triggers: skin.triggers, notes: skin.notes || undefined } : undefined,
    sleep: { date, startTime: sleep.startTime, endTime: sleep.endTime, durationHours: Number(sleep.durationHours), qualityScore: Number(sleep.qualityScore), sleepStages: sleep.sleepStages, sleepFactors: sleep.sleepFactors, notes: sleep.notes || undefined },
    mental: { date, mood: Number(mental.mood), anxiety: Number(mental.anxiety), stressLevel: Number(mental.stressLevel), energy: Number(mental.energy), focus: Number(mental.focus), journalEntry: mental.journalEntry || undefined, copingStrategies: mental.copingStrategies },
    symptoms: { date, giFlare: Number(symptoms.giFlare), skinFlare: Number(symptoms.skinFlare), migraine: Number(symptoms.migraine), fatigue: Number(symptoms.fatigue), notes: symptoms.notes || undefined }
  }
  
  const sleepPrediction = React.useMemo(() => predictSleepQuality(currentEntry), [currentEntry])
  const symptomPrediction = React.useMemo(() => predictSymptoms(currentEntry), [currentEntry])

  async function saveAll() {
    const healthEntry = {
      date,
      stomach: { date, severity: Number(stomach.severity), painLocation: stomach.painLocation || undefined, bowelChanges: stomach.bowelChanges || undefined, triggers: stomach.triggers, notes: stomach.notes || undefined },
      skin: { date, severity: Number(skin.severity), area: skin.area || undefined, rash: skin.rash, itch: skin.itch, triggers: skin.triggers, notes: skin.notes || undefined },
      sleep: { 
        date, 
        startTime: sleep.startTime, 
        endTime: sleep.endTime, 
        durationHours: Number(sleep.durationHours), 
        qualityScore: Number(sleep.qualityScore), 
        sleepStages: sleep.sleepStages, 
        sleepFactors: sleep.sleepFactors, 
        notes: sleep.notes || undefined 
      },
      mental: { 
        date, 
        mood: Number(mental.mood), 
        anxiety: Number(mental.anxiety), 
        stressLevel: Number(mental.stressLevel), 
        energy: Number(mental.energy), 
        focus: Number(mental.focus), 
        journalEntry: mental.journalEntry || undefined, 
        copingStrategies: mental.copingStrategies 
      },
      symptoms: { 
        date, 
        giFlare: Number(symptoms.giFlare), 
        skinFlare: Number(symptoms.skinFlare), 
        migraine: Number(symptoms.migraine), 
        fatigue: Number(symptoms.fatigue), 
        notes: symptoms.notes || undefined 
      },
    }
    
    const updated = upsertEntry(healthEntry)
    setEntries(updated)
    
    // Sync with AI system
    try {
      setAiLoading(true)
      setAiError(null)
      
      // Convert to AI format and sync
      const aiData = convertHealthEntryToAIData(healthEntry, userId)
      
      if (aiData.dailyLog) await healthAIClient.ingestDailyLog(aiData.dailyLog)
      if (aiData.symptoms) {
        for (const symptom of aiData.symptoms) {
          await healthAIClient.ingestSymptom(symptom)
        }
      }
      if (aiData.sleep) await healthAIClient.ingestSleep(aiData.sleep)
      if (aiData.journal) await healthAIClient.ingestJournal(aiData.journal)
      
      // Rebuild features and get new predictions
      await healthAIClient.rebuildFeatures(userId, date, date)
      
      // Get AI predictions
      const predictions = await healthAIClient.getDailyPredictions(userId, date)
      setAiPredictions(predictions)
      
      // Get AI insights
      const insights = await healthAIClient.getInsights(userId, 30)
      setAiInsights(insights)
      
    } catch (error) {
      setAiError(error instanceof Error ? error.message : 'Failed to sync with AI system')
      console.error('AI sync error:', error)
    } finally {
      setAiLoading(false)
    }
  }

  function loadSampleDataAndRefresh() {
    const sampleData = loadSampleData()
    setEntries(sampleData)
    // Refresh the page to show the new data
    window.location.reload()
  }

  return (
    <div className="container mx-auto max-w-6xl p-6 space-y-6">
      <header className="flex items-center justify-between gap-4 flex-wrap">
        <div className="space-y-1">
          <h1 className="text-2xl font-semibold">Enhanced Health Dashboard</h1>
          <p className="text-muted-foreground">Comprehensive tracking with AI-powered sleep analysis and symptom predictions</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={loadSampleDataAndRefresh}>Quick Start with Sample Data</Button>
          <Button variant="outline" onClick={() => exportCSV(entries)}>Export CSV</Button>
          <Button onClick={() => exportPDF(entries, insights)}>Export PDF</Button>
          <Button asChild variant="secondary"><Link href="/analytics">Open Analytics</Link></Button>
        </div>
      </header>

      {/* AI Predictions Alert */}
      {aiPredictions.some(p => p.risk > 0.7) && (
        <Alert className="border-red-200 bg-red-50">
          <AlertDescription>
            <strong>AI Risk Alert:</strong> High risk detected for {aiPredictions.filter(p => p.risk > 0.7).map(p => p.target).join(', ')}. 
            {aiPredictions.filter(p => p.risk > 0.7).flatMap(p => p.recommendations).slice(0, 2).join(', ')}
          </AlertDescription>
        </Alert>
      )}

      {aiError && (
        <Alert className="border-orange-200 bg-orange-50">
          <AlertDescription>
            <strong>AI System:</strong> {aiError}
          </AlertDescription>
        </Alert>
      )}

      {aiLoading && (
        <Alert className="border-blue-200 bg-blue-50">
          <AlertDescription>
            <strong>AI System:</strong> Processing your data and generating predictions...
          </AlertDescription>
        </Alert>
      )}

      {/* Original ML Predictions Alert */}
      {symptomPrediction.overallRisk === 'high' && (
        <Alert className="border-red-200 bg-red-50">
          <AlertDescription>
            <strong>High Risk Alert:</strong> Your current patterns suggest elevated risk for symptoms. 
            Consider: {symptomPrediction.preventiveActions.slice(0, 2).join(', ')}
          </AlertDescription>
        </Alert>
      )}

      {sleepPrediction.riskFactors.length > 0 && (
        <Alert className="border-yellow-200 bg-yellow-50">
          <AlertDescription>
            <strong>Sleep Quality Alert:</strong> {sleepPrediction.riskFactors.join(', ')}. 
            Recommendations: {sleepPrediction.recommendations.slice(0, 2).join(', ')}
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>General</CardTitle>
            <CardDescription>Select date and save entries</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="space-y-1">
              <Label htmlFor="date">Date</Label>
              <Input id="date" type="date" value={date} onChange={(e) => setDate(e.target.value)} />
            </div>
            <Button onClick={saveAll}>Save Today</Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Stomach</CardTitle>
            <CardDescription>Symptoms and triggers</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="space-y-1">
              <Label>Severity (0-10)</Label>
              <Input type="number" min={0} max={10} value={stomach.severity} onChange={(e) => setStomach({ ...stomach, severity: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Pain Location</Label>
              <Select value={stomach.painLocation || undefined} onValueChange={(v) => setStomach({ ...stomach, painLocation: v })}>
                <SelectTrigger className="w-full"><SelectValue placeholder="Select location" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="upper-abdomen">Upper Abdomen</SelectItem>
                  <SelectItem value="lower-abdomen">Lower Abdomen</SelectItem>
                  <SelectItem value="left-side">Left Side</SelectItem>
                  <SelectItem value="right-side">Right Side</SelectItem>
                  <SelectItem value="generalized">Generalized</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1">
              <Label>Bowel Changes</Label>
              <Select value={stomach.bowelChanges || undefined} onValueChange={(v) => setStomach({ ...stomach, bowelChanges: v })}>
                <SelectTrigger className="w-full"><SelectValue placeholder="Select change" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">None</SelectItem>
                  <SelectItem value="constipation">Constipation</SelectItem>
                  <SelectItem value="diarrhea">Diarrhea</SelectItem>
                  <SelectItem value="alternating">Alternating</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(stomach.triggers).map(([k, v]) => (
                <label key={k} className="flex items-center gap-2 text-sm">
                  <Switch checked={v} onCheckedChange={(c) => setStomach({ ...stomach, triggers: { ...stomach.triggers, [k]: c } as any })} />
                  {capitalize(k)}
                </label>
              ))}
            </div>
            <div className="space-y-1">
              <Label>Notes</Label>
              <Input value={stomach.notes} onChange={(e) => setStomach({ ...stomach, notes: e.target.value })} placeholder="Anything notable..." />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Skin</CardTitle>
            <CardDescription>Symptoms and triggers</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="space-y-1">
              <Label>Severity (0-10)</Label>
              <Input type="number" min={0} max={10} value={skin.severity} onChange={(e) => setSkin({ ...skin, severity: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Affected Area</Label>
              <Select value={skin.area || undefined} onValueChange={(v) => setSkin({ ...skin, area: v })}>
                <SelectTrigger className="w-full"><SelectValue placeholder="Select area" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="face">Face</SelectItem>
                  <SelectItem value="scalp">Scalp</SelectItem>
                  <SelectItem value="arms">Arms</SelectItem>
                  <SelectItem value="torso">Torso</SelectItem>
                  <SelectItem value="legs">Legs</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center gap-4">
              <label className="flex items-center gap-2 text-sm"><Switch checked={skin.rash} onCheckedChange={(c) => setSkin({ ...skin, rash: c })} />Rash</label>
              <label className="flex items-center gap-2 text-sm"><Switch checked={skin.itch} onCheckedChange={(c) => setSkin({ ...skin, itch: c })} />Itch</label>
            </div>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(skin.triggers).map(([k, v]) => (
                <label key={k} className="flex items-center gap-2 text-sm">
                  <Switch checked={v} onCheckedChange={(c) => setSkin({ ...skin, triggers: { ...skin.triggers, [k]: c } as any })} />
                  {pretty(k)}
                </label>
              ))}
            </div>
            <div className="space-y-1">
              <Label>Notes</Label>
              <Input value={skin.notes} onChange={(e) => setSkin({ ...skin, notes: e.target.value })} placeholder="Care routine, weather, etc." />
            </div>
          </CardContent>
        </Card>

        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Sleep Tracking</CardTitle>
            <CardDescription>Comprehensive sleep analysis with AI predictions</CardDescription>
          </CardHeader>
          <CardContent className="grid md:grid-cols-3 gap-3">
            <div className="space-y-1">
              <Label>Start Time</Label>
              <Input type="time" value={sleep.startTime} onChange={(e) => setSleep({ ...sleep, startTime: e.target.value })} />
            </div>
            <div className="space-y-1">
              <Label>End Time</Label>
              <Input type="time" value={sleep.endTime} onChange={(e) => setSleep({ ...sleep, endTime: e.target.value })} />
            </div>
            <div className="space-y-1">
              <Label>Duration (hours)</Label>
              <Input type="number" min={0} max={24} step={0.25} value={sleep.durationHours} onChange={(e) => setSleep({ ...sleep, durationHours: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Quality Score (1-10)</Label>
              <Input type="number" min={1} max={10} value={sleep.qualityScore} onChange={(e) => setSleep({ ...sleep, qualityScore: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Deep Sleep %</Label>
              <Input type="number" min={0} max={100} value={sleep.sleepStages.deep} onChange={(e) => setSleep({ ...sleep, sleepStages: { ...sleep.sleepStages, deep: Number(e.target.value) } })} />
            </div>
            <div className="space-y-1">
              <Label>REM Sleep %</Label>
              <Input type="number" min={0} max={100} value={sleep.sleepStages.rem} onChange={(e) => setSleep({ ...sleep, sleepStages: { ...sleep.sleepStages, rem: Number(e.target.value) } })} />
            </div>
            <div className="md:col-span-3">
              <Label className="text-sm font-medium mb-2 block">Sleep Factors</Label>
              <div className="grid grid-cols-2 gap-2">
                {Object.entries(sleep.sleepFactors).map(([key, value]) => (
                  <label key={key} className="flex items-center gap-2 text-sm">
                    <Switch checked={value} onCheckedChange={(c) => setSleep({ ...sleep, sleepFactors: { ...sleep.sleepFactors, [key]: c } as any })} />
                    {capitalize(key)}
                  </label>
                ))}
              </div>
            </div>
            <div className="md:col-span-3 space-y-1">
              <Label>Sleep Notes</Label>
              <Input value={sleep.notes} onChange={(e) => setSleep({ ...sleep, notes: e.target.value })} placeholder="Sleep quality, dreams, interruptions..." />
            </div>
          </CardContent>
        </Card>

        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Mental Health & Mood</CardTitle>
            <CardDescription>Enhanced mood tracking with energy and focus</CardDescription>
          </CardHeader>
          <CardContent className="grid md:grid-cols-5 gap-3">
            <div className="space-y-1">
              <Label>Mood (0-10)</Label>
              <Input type="number" min={0} max={10} value={mental.mood} onChange={(e) => setMental({ ...mental, mood: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Anxiety (0-10)</Label>
              <Input type="number" min={0} max={10} value={mental.anxiety} onChange={(e) => setMental({ ...mental, anxiety: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Stress (0-10)</Label>
              <Input type="number" min={0} max={10} value={mental.stressLevel} onChange={(e) => setMental({ ...mental, stressLevel: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Energy (0-10)</Label>
              <Input type="number" min={0} max={10} value={mental.energy} onChange={(e) => setMental({ ...mental, energy: Number(e.target.value) })} />
            </div>
            <div className="space-y-1">
              <Label>Focus (0-10)</Label>
              <Input type="number" min={0} max={10} value={mental.focus} onChange={(e) => setMental({ ...mental, focus: Number(e.target.value) })} />
            </div>
            <div className="md:col-span-5 space-y-1">
              <Label>Journal Entry</Label>
              <Input value={mental.journalEntry} onChange={(e) => setMental({ ...mental, journalEntry: e.target.value })} placeholder="How are you feeling today? What's on your mind?" />
            </div>
          </CardContent>
        </Card>

        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Enhanced Symptom Tracking</CardTitle>
            <CardDescription>Comprehensive symptom monitoring with Bristol stool scale and detailed tracking</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* GI Symptoms */}
            <div className="space-y-3">
              <h4 className="font-medium">GI Symptoms</h4>
              <div className="grid md:grid-cols-4 gap-3">
                <div className="space-y-1">
                  <Label>Reflux/Heartburn (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.reflux} onChange={(e) => setSymptoms({ ...symptoms, reflux: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Bloating (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.bloating} onChange={(e) => setSymptoms({ ...symptoms, bloating: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Abdominal Pain (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.abdominalPain} onChange={(e) => setSymptoms({ ...symptoms, abdominalPain: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Stool Consistency (1-7)</Label>
                  <Select value={symptoms.stoolConsistency.toString()} onValueChange={(v) => setSymptoms({ ...symptoms, stoolConsistency: Number(v) })}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">1 - Separate hard lumps</SelectItem>
                      <SelectItem value="2">2 - Sausage-shaped, lumpy</SelectItem>
                      <SelectItem value="3">3 - Sausage with cracks</SelectItem>
                      <SelectItem value="4">4 - Smooth, soft sausage</SelectItem>
                      <SelectItem value="5">5 - Soft blobs with clear-cut edges</SelectItem>
                      <SelectItem value="6">6 - Mushy with ragged edges</SelectItem>
                      <SelectItem value="7">7 - Watery, no solid pieces</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            {/* Skin Symptoms */}
            <div className="space-y-3">
              <h4 className="font-medium">Skin Symptoms</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Skin Location</Label>
                  <Select value={symptoms.skinLocation} onValueChange={(v) => setSymptoms({ ...symptoms, skinLocation: v })}>
                    <SelectTrigger><SelectValue placeholder="Select location" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="face">Face</SelectItem>
                      <SelectItem value="chest">Chest</SelectItem>
                      <SelectItem value="back">Back</SelectItem>
                      <SelectItem value="arms">Arms</SelectItem>
                      <SelectItem value="legs">Legs</SelectItem>
                      <SelectItem value="torso">Torso</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label>Skin Type</Label>
                  <Select value={symptoms.skinType} onValueChange={(v) => setSymptoms({ ...symptoms, skinType: v })}>
                    <SelectTrigger><SelectValue placeholder="Select type" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="acne">Acne</SelectItem>
                      <SelectItem value="rash">Rash</SelectItem>
                      <SelectItem value="itchiness">Itchiness</SelectItem>
                      <SelectItem value="dryness">Dryness</SelectItem>
                      <SelectItem value="redness">Redness</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label>Skin Severity (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.skinFlare} onChange={(e) => setSymptoms({ ...symptoms, skinFlare: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* General Health */}
            <div className="space-y-3">
              <h4 className="font-medium">General Health</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Fatigue (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.fatigue} onChange={(e) => setSymptoms({ ...symptoms, fatigue: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Headache (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.headache} onChange={(e) => setSymptoms({ ...symptoms, headache: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Migraine (0-10)</Label>
                  <Input type="number" min={0} max={10} value={symptoms.migraine} onChange={(e) => setSymptoms({ ...symptoms, migraine: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            <div className="space-y-1">
              <Label>Symptom Notes</Label>
              <Input value={symptoms.notes} onChange={(e) => setSymptoms({ ...symptoms, notes: e.target.value })} placeholder="Describe your symptoms, triggers, or relief methods..." />
            </div>
          </CardContent>
        </Card>

        {/* Enhanced Nutrition Tracking */}
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Enhanced Nutrition Tracking</CardTitle>
            <CardDescription>Detailed food and drink logging with macronutrients and portion sizes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Basic Food Information */}
            <div className="space-y-3">
              <h4 className="font-medium">Food Information</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Food Type</Label>
                  <Select value={nutrition.foodType} onValueChange={(v) => setNutrition({ ...nutrition, foodType: v })}>
                    <SelectTrigger><SelectValue placeholder="Select meal type" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="breakfast">Breakfast</SelectItem>
                      <SelectItem value="lunch">Lunch</SelectItem>
                      <SelectItem value="dinner">Dinner</SelectItem>
                      <SelectItem value="snack">Snack</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label>Portion Size</Label>
                  <Select value={nutrition.portionSize} onValueChange={(v) => setNutrition({ ...nutrition, portionSize: v })}>
                    <SelectTrigger><SelectValue placeholder="Select portion" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="small">Small</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="large">Large</SelectItem>
                      <SelectItem value="exact_grams">Exact Grams</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label>Portion (grams)</Label>
                  <Input type="number" min={0} value={nutrition.portionGrams} onChange={(e) => setNutrition({ ...nutrition, portionGrams: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Macronutrients */}
            <div className="space-y-3">
              <h4 className="font-medium">Macronutrients (grams)</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Calories</Label>
                  <Input type="number" min={0} value={nutrition.calories} onChange={(e) => setNutrition({ ...nutrition, calories: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Protein (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.protein} onChange={(e) => setNutrition({ ...nutrition, protein: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Carbs (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.carbs} onChange={(e) => setNutrition({ ...nutrition, carbs: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Fat (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.fat} onChange={(e) => setNutrition({ ...nutrition, fat: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Fiber (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.fiber} onChange={(e) => setNutrition({ ...nutrition, fiber: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Sugar (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.sugar} onChange={(e) => setNutrition({ ...nutrition, sugar: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Fat Breakdown */}
            <div className="space-y-3">
              <h4 className="font-medium">Fat Breakdown (grams)</h4>
              <div className="grid md:grid-cols-4 gap-3">
                <div className="space-y-1">
                  <Label>Saturated Fat (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.saturatedFat} onChange={(e) => setNutrition({ ...nutrition, saturatedFat: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Monounsaturated (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.monounsaturatedFat} onChange={(e) => setNutrition({ ...nutrition, monounsaturatedFat: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Polyunsaturated (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.polyunsaturatedFat} onChange={(e) => setNutrition({ ...nutrition, polyunsaturatedFat: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Trans Fat (g)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.transFat} onChange={(e) => setNutrition({ ...nutrition, transFat: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Minerals */}
            <div className="space-y-3">
              <h4 className="font-medium">Minerals & Electrolytes</h4>
              <div className="grid md:grid-cols-4 gap-3">
                <div className="space-y-1">
                  <Label>Cholesterol (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.cholesterol} onChange={(e) => setNutrition({ ...nutrition, cholesterol: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Sodium (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.sodium} onChange={(e) => setNutrition({ ...nutrition, sodium: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Potassium (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.potassium} onChange={(e) => setNutrition({ ...nutrition, potassium: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Calcium (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.calcium} onChange={(e) => setNutrition({ ...nutrition, calcium: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Vitamins */}
            <div className="space-y-3">
              <h4 className="font-medium">Vitamins & Minerals</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Vitamin C (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.vitaminC} onChange={(e) => setNutrition({ ...nutrition, vitaminC: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Vitamin D (IU)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.vitaminD} onChange={(e) => setNutrition({ ...nutrition, vitaminD: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Iron (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.iron} onChange={(e) => setNutrition({ ...nutrition, iron: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Magnesium (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.magnesium} onChange={(e) => setNutrition({ ...nutrition, magnesium: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Zinc (mg)</Label>
                  <Input type="number" min={0} step={0.1} value={nutrition.zinc} onChange={(e) => setNutrition({ ...nutrition, zinc: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Drinks */}
            <div className="space-y-3">
              <h4 className="font-medium">Drinks & Fluids</h4>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Water Intake (ml)</Label>
                  <Input type="number" min={0} value={nutrition.waterIntake} onChange={(e) => setNutrition({ ...nutrition, waterIntake: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Alcohol (drinks)</Label>
                  <Input type="number" min={0} value={nutrition.alcohol} onChange={(e) => setNutrition({ ...nutrition, alcohol: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Carbonated Drinks</Label>
                  <Input type="number" min={0} value={nutrition.carbonatedDrinks} onChange={(e) => setNutrition({ ...nutrition, carbonatedDrinks: Number(e.target.value) })} />
                </div>
              </div>
            </div>

            {/* Food Flags */}
            <div className="space-y-3">
              <h4 className="font-medium">Food Flags & Triggers</h4>
              <div className="flex items-center gap-4">
                <label className="flex items-center gap-2 text-sm">
                  <Switch checked={nutrition.artificialSweeteners} onCheckedChange={(c) => setNutrition({ ...nutrition, artificialSweeteners: c })} />
                  Artificial Sweeteners
                </label>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Lifestyle & Recovery Tracking */}
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Lifestyle & Recovery Tracking</CardTitle>
            <CardDescription>Exercise, recovery activities, and relaxation tracking</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-3 gap-3">
              <div className="space-y-1">
                <Label>Exercise Type</Label>
                <Select value={lifestyle.exerciseType} onValueChange={(v) => setLifestyle({ ...lifestyle, exerciseType: v })}>
                  <SelectTrigger><SelectValue placeholder="Select exercise" /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cardio">Cardio</SelectItem>
                    <SelectItem value="strength">Strength Training</SelectItem>
                    <SelectItem value="yoga">Yoga</SelectItem>
                    <SelectItem value="stretching">Stretching</SelectItem>
                    <SelectItem value="walk">Walking</SelectItem>
                    <SelectItem value="cycling">Cycling</SelectItem>
                    <SelectItem value="swimming">Swimming</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-1">
                <Label>Duration (minutes)</Label>
                <Input type="number" min={0} value={lifestyle.exerciseDuration} onChange={(e) => setLifestyle({ ...lifestyle, exerciseDuration: Number(e.target.value) })} />
              </div>
              <div className="space-y-1">
                <Label>Intensity (1-10)</Label>
                <Input type="number" min={1} max={10} value={lifestyle.exerciseIntensity} onChange={(e) => setLifestyle({ ...lifestyle, exerciseIntensity: Number(e.target.value) })} />
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-3">
              <div className="space-y-1">
                <Label>Meditation (minutes)</Label>
                <Input type="number" min={0} value={lifestyle.meditationMinutes} onChange={(e) => setLifestyle({ ...lifestyle, meditationMinutes: Number(e.target.value) })} />
              </div>
              <div className="space-y-1">
                <Label>Relaxation Quality (1-10)</Label>
                <Input type="number" min={1} max={10} value={lifestyle.relaxationQuality} onChange={(e) => setLifestyle({ ...lifestyle, relaxationQuality: Number(e.target.value) })} />
              </div>
            </div>

            <div className="space-y-1">
              <Label>Recovery Activities</Label>
              <div className="grid grid-cols-2 gap-2">
                {['meditation', 'massage', 'sauna', 'journaling', 'breathing_exercises', 'nature_walk'].map((activity) => (
                  <label key={activity} className="flex items-center gap-2 text-sm">
                    <Switch 
                      checked={lifestyle.recoveryActivities.includes(activity)} 
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setLifestyle({ ...lifestyle, recoveryActivities: [...lifestyle.recoveryActivities, activity] });
                        } else {
                          setLifestyle({ ...lifestyle, recoveryActivities: lifestyle.recoveryActivities.filter(a => a !== activity) });
                        }
                      }} 
                    />
                    {activity.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </label>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Menstrual Cycle Tracking */}
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Menstrual Cycle Tracking</CardTitle>
            <CardDescription>Track cycle phases and their impact on symptoms</CardDescription>
          </CardHeader>
          <CardContent className="grid md:grid-cols-2 gap-3">
            <div className="space-y-1">
              <Label>Cycle Phase</Label>
              <Select value={menstrual.phase} onValueChange={(v) => setMenstrual({ ...menstrual, phase: v })}>
                <SelectTrigger><SelectValue placeholder="Select phase" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="period">Period</SelectItem>
                  <SelectItem value="follicular">Follicular</SelectItem>
                  <SelectItem value="ovulation">Ovulation</SelectItem>
                  <SelectItem value="luteal">Luteal</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1">
              <Label>Cycle Day</Label>
              <Input type="number" min={1} max={35} value={menstrual.cycleDay} onChange={(e) => setMenstrual({ ...menstrual, cycleDay: Number(e.target.value) })} />
            </div>
          </CardContent>
        </Card>

        {/* Daily Flare Status */}
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Daily Flare Status</CardTitle>
            <CardDescription>Track daily flares - this is the target variable for ML predictions</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-4">
              <label className="flex items-center gap-2 text-sm">
                <Switch checked={dailyFlare.status} onCheckedChange={(c) => setDailyFlare({ ...dailyFlare, status: c })} />
                Did you experience a flare today?
              </label>
            </div>

            {dailyFlare.status && (
              <div className="grid md:grid-cols-3 gap-3">
                <div className="space-y-1">
                  <Label>Flare Type</Label>
                  <Select value={dailyFlare.type} onValueChange={(v) => setDailyFlare({ ...dailyFlare, type: v })}>
                    <SelectTrigger><SelectValue placeholder="Select type" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="gut">Gut Flare</SelectItem>
                      <SelectItem value="skin">Skin Flare</SelectItem>
                      <SelectItem value="mental">Mental Flare</SelectItem>
                      <SelectItem value="both">Both Gut & Skin</SelectItem>
                      <SelectItem value="all">All Types</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label>Severity (0-10)</Label>
                  <Input type="number" min={0} max={10} value={dailyFlare.severity} onChange={(e) => setDailyFlare({ ...dailyFlare, severity: Number(e.target.value) })} />
                </div>
                <div className="space-y-1">
                  <Label>Duration (hours)</Label>
                  <Input type="number" min={0} value={dailyFlare.durationHours} onChange={(e) => setDailyFlare({ ...dailyFlare, durationHours: Number(e.target.value) })} />
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Sleep Quality (14d)</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer className="w-full h-[220px]" config={{ quality: { label: "Quality", color: "var(--chart-1)" }, duration: { label: "Duration", color: "var(--chart-2)" } }}>
              <LineChart data={series14.sleep}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                <YAxis domain={[0,10]} tick={{ fontSize: 12 }} />
                <ChartTooltip content={<ChartTooltipContent />} />
                <ChartLegend content={<ChartLegendContent />} />
                <Line type="monotone" dataKey="quality" stroke="var(--color-quality)" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="duration" stroke="var(--color-duration)" strokeWidth={2} dot={false} />
              </LineChart>
            </ChartContainer>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Mental Health (14d)</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer className="w-full h-[220px]" config={{ mood: { label: "Mood", color: "var(--chart-3)" }, stress: { label: "Stress", color: "var(--chart-4)" }, energy: { label: "Energy", color: "var(--chart-5)" } }}>
              <LineChart data={series14.mentalMood}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                <YAxis domain={[0,10]} tick={{ fontSize: 12 }} />
                <ChartTooltip content={<ChartTooltipContent />} />
                <ChartLegend content={<ChartLegendContent />} />
                <Line type="monotone" dataKey="mood" stroke="var(--color-mood)" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="stress" stroke="var(--color-stress)" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="energy" stroke="var(--color-energy)" strokeWidth={2} dot={false} />
              </LineChart>
            </ChartContainer>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Symptoms (14d)</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer className="w-full h-[220px]" config={{ giFlare: { label: "GI Flare", color: "var(--chart-1)" }, skinFlare: { label: "Skin Flare", color: "var(--chart-2)" }, migraine: { label: "Migraine", color: "var(--chart-3)" } }}>
              <LineChart data={series14.symptoms}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                <YAxis domain={[0,10]} tick={{ fontSize: 12 }} />
                <ChartTooltip content={<ChartTooltipContent />} />
                <ChartLegend content={<ChartLegendContent />} />
                <Line type="monotone" dataKey="giFlare" stroke="var(--color-giFlare)" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="skinFlare" stroke="var(--color-skinFlare)" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="migraine" stroke="var(--color-migraine)" strokeWidth={2} dot={false} />
              </LineChart>
            </ChartContainer>
          </CardContent>
        </Card>
      </div>

      {/* AI Predictions Dashboard */}
      {aiPredictions.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {aiPredictions.map((prediction, idx) => (
            <Card key={idx}>
              <CardHeader>
                <CardTitle className="text-sm capitalize">{prediction.target} Risk</CardTitle>
                <CardDescription>AI Prediction</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold mb-2">
                  <span className={prediction.risk > 0.7 ? "text-red-600" : prediction.risk > 0.4 ? "text-yellow-600" : "text-green-600"}>
                    {(prediction.risk * 100).toFixed(0)}%
                  </span>
                </div>
                <div className="text-xs text-muted-foreground mb-2">
                  Confidence: {(prediction.confidence * 100).toFixed(0)}%
                </div>
                {prediction.factors.length > 0 && (
                  <div className="text-xs">
                    <div className="font-medium mb-1">Key Factors:</div>
                    <ul className="list-disc pl-4">
                      {prediction.factors.slice(0, 2).map((factor, i) => (
                        <li key={i}>{factor}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* AI Insights */}
      {aiInsights.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>AI Insights</CardTitle>
            <CardDescription>Advanced AI-powered health insights</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {aiInsights.map((insight, idx) => (
                <div key={idx} className="p-3 border rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">{insight.title}</h4>
                    <Badge variant={insight.priority === 'high' ? 'destructive' : insight.priority === 'medium' ? 'secondary' : 'default'}>
                      {insight.priority}
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground mb-2">{insight.description}</p>
                  <div className="flex items-center justify-between text-xs">
                    <span>Confidence: {(insight.confidence * 100).toFixed(0)}%</span>
                    <span className={insight.actionable ? "text-green-600" : "text-gray-500"}>
                      {insight.actionable ? "Actionable" : "Informational"}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      <Card>
        <CardHeader>
          <CardTitle>Insights</CardTitle>
          <CardDescription>Adaptive suggestions based on your data</CardDescription>
        </CardHeader>
        <CardContent>
          {insights.length === 0 ? (
            <p className="text-muted-foreground">No strong patterns yet. Keep logging for better recommendations.</p>
          ) : (
            <ul className="space-y-2 list-disc pl-5">
              {insights.slice(0, 5).map((ins, i) => (
                <li key={i} className="leading-relaxed">
                  <span className="font-medium">[{ins.area}]</span> {ins.description} <span className="text-muted-foreground">(score: {ins.score.toFixed(2)})</span>
                </li>
              ))}
            </ul>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

function capitalize(s: string) { return s.charAt(0).toUpperCase() + s.slice(1) }
function pretty(s: string) { return s.replace(/([A-Z])/g, ' $1').replace(/^./, c => c.toUpperCase()) }
